{"version":3,"sources":["pages/FinanceiroDashboard.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","antd__WEBPACK_IMPORTED_MODULE_1__","antd__WEBPACK_IMPORTED_MODULE_2__","antd__WEBPACK_IMPORTED_MODULE_3__","antd__WEBPACK_IMPORTED_MODULE_4__","antd__WEBPACK_IMPORTED_MODULE_5__","axios__WEBPACK_IMPORTED_MODULE_6__","Option","Select","FinanceiroDashboard","clientes","setClientes","useState","numeroDeClientesAtivos","setNumeroDeClientesAtivos","meses","setMeses","selectedMes","setSelectedMes","loading","setLoading","useEffect","async","clientesData","axios","get","resultadoData","data","uniqueMeses","Set","map","cliente","mes_ativacao","error","message","fetchData","filteredClientes","filter","quantidadeAtivacoes","length","React","createElement","className","placeholder","onChange","value","style","width","marginBottom","mes","key","Spin","size","tip","Table","columns","title","dataIndex","dataSource","rowKey","pagination","pageSize","Button","type","onClick","window","location","reload","marginTop"],"mappings":"gHAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAAAQ,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAAAU,EAAAV,EAAA,IAAAW,EAAAX,EAAA,KAAAA,EAAA,KAKA,MAAMY,OAAEA,GAAWC,IA8GJC,UA5GaA,MAC1B,MAAOC,EAAUC,GAAeC,mBAAS,KAClCC,EAAwBC,GAA6BF,mBAAS,IAC9DG,EAAOC,GAAYJ,mBAAS,KAC5BK,EAAaC,GAAkBN,mBAAS,KACxCO,EAASC,GAAcR,oBAAS,GAEvCS,oBAAU,KACUC,WAChB,IAEE,MAAMC,QAAqBC,IAAMC,IAAI,6EAC/BC,QAAsBF,IAAMC,IAAI,0DAEtCd,EAAYY,EAAaI,KAAKjB,UAC9BI,EAA0BY,EAAcC,KAAKd,wBAG7C,MAAMe,EAAc,IAAI,IAAIC,IAAIN,EAAaI,KAAKjB,SAASoB,IAAIC,GAAWA,EAAQC,gBAClFhB,EAASY,GAETR,GAAW,GACX,MAAOa,GACPC,IAAQD,MAAM,sDACdb,GAAW,KAIfe,IACC,IAEH,MAwBMC,EAAmB1B,EAAS2B,OAAON,IACvCd,GAAcc,EAAQC,eAAiBf,GAInCqB,EAAsBF,EAAiBG,OAE7C,OACEC,IAAAC,cAAA,OAAKC,UAAU,kCACbF,IAAAC,cAAA,UAAI,wBACJD,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,SAAG,6BAA2B5B,GAC9B2B,IAAAC,cAAA,SACGxB,wBACmBA,MAAgBqB,+BACXA,MAG7BE,IAAAC,cAAA,OAAKC,UAAU,oBACbF,IAAAC,cAACjC,IAAM,CACLmC,YAAY,uCACZC,SAAWC,GAAU3B,EAAe2B,GACpCC,MAAO,CAAEC,MAAO,IAAKC,aAAc,KAEnCR,IAAAC,cAAClC,EAAM,CAACsC,MAAM,IAAG,kBAChB9B,EAAMe,IAAImB,GACTT,IAAAC,cAAClC,EAAM,CAAC2C,IAAKD,EAAKJ,MAAOI,GACtBA,MAKR9B,EACCqB,IAAAC,cAACU,IAAI,CAACC,KAAK,QAAQC,IAAI,wBAEvBb,IAAAC,cAACa,IAAK,CACJC,QA5DQ,CACd,CACEC,MAAO,kBACPC,UAAW,eACXP,IAAK,gBAEP,CACEM,MAAO,yBACPC,UAAW,gBACXP,IAAK,iBAEP,CACEM,MAAO,2BACPC,UAAW,eACXP,IAAK,gBAEP,CACEM,MAAO,YACPC,UAAW,YACXP,IAAK,cA0CDQ,WAAYtB,EACZuB,OAAO,eACPC,WAAY,CAAEC,SAAU,MAG5BrB,IAAAC,cAACqB,IAAM,CACLC,KAAK,UACLC,QAASA,IAAMC,OAAOC,SAASC,SAC/BrB,MAAO,CAAEsB,UAAW,KACrB","file":"static/js/8.bc40688b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Table, Select, message, Spin, Button } from 'antd';\r\nimport axios from 'axios';\r\nimport './styles/FinanceiroDashboard.css';\r\n\r\nconst { Option } = Select;\r\n\r\nconst FinanceiroDashboard = () => {\r\n  const [clientes, setClientes] = useState([]);\r\n  const [numeroDeClientesAtivos, setNumeroDeClientesAtivos] = useState(0);\r\n  const [meses, setMeses] = useState([]);\r\n  const [selectedMes, setSelectedMes] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Carregar dados dos clientes\r\n        const clientesData = await axios.get('https://apidoixc.nexusnerds.com.br/Data/Mês_AtivaçãoCliente.json');\r\n        const resultadoData = await axios.get('https://apidoixc.nexusnerds.com.br/Data/resultado.json');\r\n\r\n        setClientes(clientesData.data.clientes);\r\n        setNumeroDeClientesAtivos(resultadoData.data.numeroDeClientesAtivos);\r\n\r\n        // Extrair os meses únicos para o filtro\r\n        const uniqueMeses = [...new Set(clientesData.data.clientes.map(cliente => cliente.mes_ativacao))];\r\n        setMeses(uniqueMeses);\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        message.error('Erro ao carregar os dados do dashboard financeiro.');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Nome do Cliente',\r\n      dataIndex: 'nome_cliente',\r\n      key: 'nome_cliente',\r\n    },\r\n    {\r\n      title: 'Data de Ativação',\r\n      dataIndex: 'data_ativacao',\r\n      key: 'data_ativacao',\r\n    },\r\n    {\r\n      title: 'Mês de Ativação',\r\n      dataIndex: 'mes_ativacao',\r\n      key: 'mes_ativacao',\r\n    },\r\n    {\r\n      title: 'Bloqueado',\r\n      dataIndex: 'bloqueado',\r\n      key: 'bloqueado',\r\n    },\r\n  ];\r\n\r\n  // Filtra os clientes com base no mês selecionado\r\n  const filteredClientes = clientes.filter(cliente => \r\n    selectedMes ? cliente.mes_ativacao === selectedMes : true\r\n  );\r\n\r\n  // Conta o número de ativações no mês selecionado ou em todos os meses\r\n  const quantidadeAtivacoes = filteredClientes.length;\r\n\r\n  return (\r\n    <div className=\"financeiro-dashboard-container\">\r\n      <h2>Dashboard Financeiro</h2>\r\n      <div className=\"info-container\">\r\n        <p>Total de Clientes Ativos: {numeroDeClientesAtivos}</p>\r\n        <p>\r\n          {selectedMes \r\n            ? `Ativações em ${selectedMes}: ${quantidadeAtivacoes}`\r\n            : `Ativações Totais: ${quantidadeAtivacoes}`}\r\n        </p>\r\n      </div>\r\n      <div className=\"filter-container\">\r\n        <Select\r\n          placeholder=\"Filtrar por mês de ativação\"\r\n          onChange={(value) => setSelectedMes(value)}\r\n          style={{ width: 200, marginBottom: 20 }}\r\n        >\r\n          <Option value=\"\">Todos os meses</Option>\r\n          {meses.map(mes => (\r\n            <Option key={mes} value={mes}>\r\n              {mes}\r\n            </Option>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n      {loading ? (\r\n        <Spin size=\"large\" tip=\"Carregando dados...\" />\r\n      ) : (\r\n        <Table\r\n          columns={columns}\r\n          dataSource={filteredClientes}\r\n          rowKey=\"nome_cliente\"\r\n          pagination={{ pageSize: 10 }}\r\n        />\r\n      )}\r\n      <Button\r\n        type=\"primary\"\r\n        onClick={() => window.location.reload()}\r\n        style={{ marginTop: 20 }}\r\n      >\r\n        Atualizar Dados\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FinanceiroDashboard;\r\n"],"sourceRoot":""}