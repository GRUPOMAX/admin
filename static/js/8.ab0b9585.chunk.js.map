{"version":3,"sources":["pages/CobrancaDashboard.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","antd__WEBPACK_IMPORTED_MODULE_1__","antd__WEBPACK_IMPORTED_MODULE_2__","antd__WEBPACK_IMPORTED_MODULE_3__","antd__WEBPACK_IMPORTED_MODULE_4__","_ant_design_icons__WEBPACK_IMPORTED_MODULE_5__","xlsx__WEBPACK_IMPORTED_MODULE_6__","Search","Input","CobrancaDashboard","React","memo","clientes","setClientes","useState","filteredClientes","setFilteredClientes","loading","setLoading","searchTerm","setSearchTerm","currentPage","setCurrentPage","pageSize","useEffect","async","response","fetch","data","json","error","console","fetchClientes","filtered","filter","cliente","razao","toLowerCase","includes","endereco","handleCopy","text","navigator","clipboard","writeText","then","message","success","catch","totalBlocked","length","indexOfLastCliente","indexOfFirstCliente","currentClientes","slice","createElement","className","placeholder","onChange","e","target","value","enterButton","style","display","width","height","borderRadius","backgroundColor","total","getColorForBlockedClients","marginLeft","map","key","id_cliente","telefone_celular","Button","type","icon","CopyOutlined","onClick","telefone_comercial","Pagination","current","page","marginTop","textAlign","exportToExcel","clientesSemEndereco","_ref","rest","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet"],"mappings":"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","file":"static/js/8.ab0b9585.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Input, Pagination, Button, message } from 'antd';\r\nimport { CopyOutlined } from '@ant-design/icons';\r\nimport * as XLSX from 'xlsx';\r\nimport './styles/CobrancaDashboard.css';\r\n\r\nconst { Search } = Input;\r\n\r\nconst CobrancaDashboard = React.memo(() => {\r\n  const [clientes, setClientes] = useState([]);\r\n  const [filteredClientes, setFilteredClientes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize] = useState(10); // Define 10 itens por página\r\n\r\n  useEffect(() => {\r\n    const fetchClientes = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await fetch('https://apidoixc.nexusnerds.com.br/Data/ClientesBloquados.json');\r\n        const data = await response.json();\r\n        setClientes(data);\r\n        setFilteredClientes(data); // Inicialmente, a lista filtrada é a mesma que a original\r\n      } catch (error) {\r\n        console.error('Erro ao buscar dados:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchClientes();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Filtra os clientes com base no termo de busca\r\n    const filtered = clientes.filter((cliente) =>\r\n      cliente.razao.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      cliente.endereco.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n    setFilteredClientes(filtered);\r\n    setCurrentPage(1); // Reseta para a primeira página ao buscar\r\n  }, [searchTerm, clientes]);\r\n\r\n  const handlePageChange = (page) => {\r\n    setCurrentPage(page);\r\n  };\r\n\r\n  const handleCopy = (text) => {\r\n    navigator.clipboard.writeText(text).then(() => {\r\n      message.success('Número copiado para a área de transferência!');\r\n    }).catch(() => {\r\n      message.error('Falha ao copiar o número.');\r\n    });\r\n  };\r\n\r\n  const getColorForBlockedClients = (total) => {\r\n    if (total > 50) {\r\n      return 'red';\r\n    } else if (total > 20) {\r\n      return 'orange';\r\n    } else {\r\n      return 'green';\r\n    }\r\n  };\r\n\r\n  const totalBlocked = filteredClientes.length;\r\n\r\n  // Calcula o índice inicial e final dos clientes que devem ser exibidos na página atual\r\n  const indexOfLastCliente = currentPage * pageSize;\r\n  const indexOfFirstCliente = indexOfLastCliente - pageSize;\r\n  const currentClientes = filteredClientes.slice(indexOfFirstCliente, indexOfLastCliente);\r\n\r\n  const exportToExcel = () => {\r\n    // Criando uma nova lista de clientes sem a propriedade \"endereco\"\r\n    const clientesSemEndereco = filteredClientes.map(({ endereco, ...rest }) => rest);\r\n\r\n    const worksheet = XLSX.utils.json_to_sheet(clientesSemEndereco);\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Clientes Bloqueados\");\r\n    XLSX.writeFile(workbook, \"clientes_bloqueados.xlsx\");\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Carregando...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"cobranca-dashboard-custom-container\">\r\n      <h2>Clientes Bloqueados</h2>\r\n      <Search\r\n        className=\"custom-search\"\r\n        placeholder=\"Buscar por nome ou endereço...\"\r\n        onChange={(e) => setSearchTerm(e.target.value)}\r\n        enterButton\r\n      />\r\n      <p>Total de clientes bloqueados: {totalBlocked} \r\n        <span \r\n          style={{\r\n            display: 'inline-block',\r\n            width: '10px',\r\n            height: '10px',\r\n            borderRadius: '50%',\r\n            backgroundColor: getColorForBlockedClients(totalBlocked),\r\n            marginLeft: '20px'\r\n          }}\r\n        />\r\n      </p>\r\n      <table className=\"clientes-table-custom\">\r\n        <thead>\r\n          <tr>\r\n            <th>ID Cliente</th>\r\n            <th>Razão Social</th>\r\n            <th>Telefone Celular</th>\r\n            <th>Telefone Comercial</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {currentClientes.map((cliente) => (\r\n            <tr key={cliente.id_cliente}>\r\n              <td>{cliente.id_cliente}</td>\r\n              <td>{cliente.razao}</td>\r\n              <td>\r\n                {cliente.telefone_celular}{' '}\r\n                <Button type=\"link\" icon={<CopyOutlined />} onClick={() => handleCopy(cliente.telefone_celular)} />\r\n              </td>\r\n              <td>\r\n                {cliente.telefone_comercial || 'SEM CONTATO'}{' '}\r\n                {cliente.telefone_comercial && (\r\n                  <Button type=\"link\" icon={<CopyOutlined />} onClick={() => handleCopy(cliente.telefone_comercial)} />\r\n                )}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <Pagination\r\n        current={currentPage}\r\n        total={filteredClientes.length}\r\n        pageSize={pageSize}\r\n        onChange={handlePageChange}\r\n        style={{ marginTop: 20, textAlign: 'center' }}\r\n      />\r\n\r\n      <Button type=\"primary\" onClick={exportToExcel} className=\"button-download-custom\">\r\n        Baixar Excel\r\n      </Button>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default CobrancaDashboard;\r\n"],"sourceRoot":""}